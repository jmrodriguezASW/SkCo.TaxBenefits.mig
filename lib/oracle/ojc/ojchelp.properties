# ==============================================================================
#  OJC commandline options help
#
#  1) values starting with a dash (-) are used as a link to another key
#  2) %% in the value is a special character that will be replaced by
#    File.pathSeparator
#
#  Copyright (c) 2004, 2005  Oracle Corp.  All Rights Reserved
# ==============================================================================

g\u003Anone=-g
g\u003Asource=-g
g\u003Alines=-g
g\u003Avars=-g
g=\n\
\  -g         Generates all possible debugging information, including\n\
\             source file, line number, and local variable information.\n\
\n\
\  -g:none    Generates no debugging information at all. This will also\n\
\             cause exception stack information to not contain any file\n\
\             or source line information.\n\
\n\
\  -g:source  Generates source file debugging information.\n\
\n\
\  -g:lines   Generates line number debugging information.\n\
\n\
\  -g:vars    Generates local variable debugging information.\n\
\n\
\  By default source file and line number debugging information are generated,\n\
\  but no local variable debugging information.

# ------------------------------------------------------------------------------

g\u003Acodecoach=\n\
\   -g:codecoach  Generates information for running CodeCoach. This feature\n\
\                 requires running the compiled program with Oracle's Java\n\
\                 virtual machine (OJVM). Any other JVM will ignore this\n\
\                 information. See JDeveloper documentation for more information\n\
\                 on this feature. By default no CodeCoach information is\n\
\                 generated.

# ------------------------------------------------------------------------------

Xwarnerror=-warn
nowarn=-warn
warn=\n\
\  -nowarn           Suppresses all warning messages.\n\
\n\
\  -warn             Enables all warning messages.\n\
\n\
\  -warn:<number>    Enables a specific warning message given by <number>\n\
\                    (see list of warning numbers below).\n\
\n\
\  -nowarn:<number>  Suppresses a specific warning message given by <number>\n\
\                    (see list of warning numbers below).\n\
\n\
\  -Xwarnerror       Treats warnings as errors (no class files will be\n\
\                    generated if there are any warnings).\n\
\n\
\  Warning   Default\n\
\  number    behavior   Description\n\
\  ---------------------------------------------------------------------------\n\
\    224       on       Warns if a keyword of a later Java version is used\n\
\                       as an identifier. With Java 1.4 'assert' became a\n\
\                       keyword and with Java 1.5 'enum became a keyword as\n\
\                       well.\n\
\n\
\    320       off      Warns if a static member is qualified by an object.\n\
\n\
\    368       off      Prints detailed warning messages when a deprecated\n\
\                       type, field or method is used.\n\
\n\
\    370       on       Warns if any deprecated types, fields or methods are\n\
\                       used.\n\
\n\
\    371       on       Warns if a deprecated class, interface, or method is\n\
\                       overridden or implemented without being marked\n\
\                       deprecated itself.\n\
\n\
\    372       on       Warns if a cast is unnecessary.\n\
\n\
\    375       on       Warns if a variable or field is assigned to itself.\n\
\n\
\    376       on       Warns if a class implements java.io.Serializable but\n\
\                       doesn't define the field serialVersionUID.\n\
\n\
\    377       on       Warns if an unchecked conversion is found and type\n\
\                       safety cannot be ensured.\n\
\n\
\    412       off      Warns if an empty statement is encountered.\n\
\n\
\    413       on       Warns if a switch statement doesn't contain any\n\
\                       case labels.\n\
\n\
\    414       off      Warns if code can fall through a case label.\n\
\n\
\    415       off      Warns if a catch statment contains no other statements.\n\
\n\
\    486       off      Warns if an import is not used.\n\
\n\
\    487       off      Warns if only some files of a star import are used.\n\
\n\
\    488       on       Warns if a package name doesn't match the path of\n\
\                       the source file.\n\
\n\
\    489       on       Warns if there is a duplicate import.\n\
\n\
\    556       on       Warns if a variable is assigned to but never used.\n\
\n\
\    557       on       Warns if a finally block cannot complete normally.\n\
\n\
\    558       off      Warns if a parameter is never used.\n\
\n\
\    559       on       Warns if a variable is declared but never used.\n\
\n\
\    560       off      Warns if a catch variable is never used within its\n\
\                       catch statement.\n\
\n\
\    561       on       Warns if a method is declared but never invoked.\n\
\n\
\    909       on       Warns if a source file is empty.

# ------------------------------------------------------------------------------

warningtag=\n\
\  -warningtag <taglist>  Warns about the specified javadoc comment tags.\n\
\                         <taglist> is a comma separated list of tags.

# ------------------------------------------------------------------------------

noquiet=-verbose
verbosepath=-verbose
verbose=\n\
\  -verbose      Prints out information about source and class paths used\n\
\                in the compilation, progress information during the\n\
\                compilation, as well as the number of files processed by\n\
\                the compilation.\n\
\n\
\  -verbosepath  Prints out information about source and class paths used\n\
\                for the compilation.\n\
\n\
\  -noquiet      Prints out the names of the files being compiled.

# ------------------------------------------------------------------------------

deprecation\u003Aself=-deprecation
deprecation=\n\
\  -deprecation       Turns on warnings for detecting usage of deprecated\n\
\                     types, fields, and methods.\n\
\n\
\  -deprecation:self  Detects usage of deprecated types, fields, and methods\n\
\                     within the class they are defined in.

# ------------------------------------------------------------------------------

cp=-classpath
bootclasspath=-classpath
extdirs=-classpath
endorseddirs=-classpath
classpath=\n\
\  -classpath <pathlist>\n\
\           or\n\
\  -cp <pathlist>             Overrides the location in which the compiler\n\
\                             looks for class files.\n\
\n\
\  -bootclasspath <pathlist>  Overrides the location in which the compiler\n\
\                             looks for system class files.\n\
\n\
\  -extdirs <pathlist>        Overrides the location in which the compiler\n\
\                             looks for installed extensions,\n\
\n\
\  -endorseddirs <pathlist>   Overrides the location in which the compiler\n\
\                             looks for endorsed standards.\n\
\n\
\  <pathlist> is a list of paths and/or jar files separated by '%%'.

# ------------------------------------------------------------------------------

sourcepath=\n\
\  -sourcepath <pathlist>  Sets the location in which the compiler will\n\
\                          look for sourcefiles of classes that it cannot\n\
\                          find a class file for. It will then attempt to\n\
\                          compile that source file as well.\n\
\n\
\  <pathlist> is a list of paths separated by '%%'.

# ------------------------------------------------------------------------------

nowrite=-d
d=\n\
\  -d <outdir>  Sets the output directory into which the generated class\n\
\               files will be saved. If no output directory is set class\n\
\               files will be saved into their corresponding source file\n\
\               directory.\n\
\n\
\  -nowrite     Suppresses the generation of any class files.

# ------------------------------------------------------------------------------

encoding=\n\
\  -encoding <name>  Specifies the character encoding of the source files.\n\
\                    By default the compiler uses the default encoding of\n\
\                    the system. The <name> of the encoding is one of the\n\
\                    encodings supported by the JDK that runs the compiler.\n\
\                    For a list of possible encodings refer to the JDK\n\
\                    documentation.

# ------------------------------------------------------------------------------

source=-target
target=\n\
\  -source <version>  Sets the source compatibility to a particular Java\n\
\                     version. Only language features defined by the Java\n\
\                     version will be recognized in the source files by the\n\
\                     compiler. By default the source compatiblity is set to\n\
\                     Java version 1.3.\n\
\n\
\  -target <version>  Generates class files for a particular Java version.\n\
\                     This determines the minimum Java version needed to\n\
\                     execute the generated classes. By default class files\n\
\                     generated are compatible with all Java versions 1.2\n\
\                     and newer.\n\
\n\
\  <version> is of the form <major version number>.<minor version number>,\n\
\  e.g. 1.2 or 5.0

# ------------------------------------------------------------------------------

version=\n\
\  -version  Prints version information about the compiler.

# ------------------------------------------------------------------------------

Xomitasserts=-exclude
exclude=\n\
\  -exclude <classnamelist>  Eliminates calls to static void methods of\n\
\                            the classes listed with this option.\n\
\                            <classnamelist> is a semicolon separated list of\n\
\                            fully qualified class names.\n\
\n\
\  -Xomitasserts             Suppresses the generation of code for assert\n\
\                            statements.

# ------------------------------------------------------------------------------

msglimit=\n\
\  -msglimit:<number>  Sets the maximum total <number> of error and warning\n\
\                      messages combined before the compilation will be\n\
\                      aborted. By default this number is set to 1000.

# ------------------------------------------------------------------------------

strictfp=\n\
\  -strictfp  Forces all methods to be compiled as if they were explicitly\n\
\             declared strictfp.

# ------------------------------------------------------------------------------

recurse=\n\
\  -recurse [level]  Recursively expands wildcard file specifications up to\n\
\                    [level]s deep (if specified).

# ------------------------------------------------------------------------------

p=-s
s=\n\
\  -p {package}+  After this option all commandline arguments not preceeded\n\
\                 by a dash (-) will be interpreted as fully qualified package\n\
\                 names. All sources in these package will be compiled.\n\
\                 Sources will be looked for on the path set by the -sourcepath\n\
\                 option.\n\
\n\
\  -s {sources}+  After this option all commandline arguments not preceeded\n\
\                 by a dash (-) will be interpreted a source file names.

# ==============================================================================
